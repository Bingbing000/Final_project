age_effect <- coef(summary(model_interaction))[["age", "Estimate"]]
se_age_effect <- coef(summary(model_interaction))[["age", "Std. Error"]]
# Adjusting age effect for 5 years
or_age_5years <- exp(age_effect * 5)
lower_ci_age_5years <- exp((age_effect - 1.96 * se_age_effect) * 5)
upper_ci_age_5years <- exp((age_effect + 1.96 * se_age_effect) * 5)
c(OR = or_age_5years, LowerCI = lower_ci_age_5years, UpperCI = upper_ci_age_5years)
model <- glm(lbw ~ age + race + smk, data = lbw_data, family = binomial())
# Calculating OR for age increase by 5 years, separately by race
age_effect <- coef(summary(model))[["age", "Estimate"]]
se_age_effect <- coef(summary(model))[["age", "Std. Error"]]
# Adjusting age effect for 5 years
or_age_5years <- exp(age_effect * 5)
lower_ci_age_5years <- exp((age_effect - 1.96 * se_age_effect) * 5)
upper_ci_age_5years <- exp((age_effect + 1.96 * se_age_effect) * 5)
c(OR = or_age_5years, LowerCI = lower_ci_age_5years, UpperCI = upper_ci_age_5years)
# Load the broom package for tidy summaries
library(broom)
model_interaction1 <- glm(lbw ~ age + race + smk + smk:race, data = lbw_data, family = binomial())
# Get tidy summary with exponentiated coefficients (ORs) and confidence intervals
tidy_interaction <- tidy(model_interaction, exponentiate = TRUE, conf.int = TRUE)
# Print the results
print(tidy_interaction)
# Load the broom package for tidy summaries
library(broom)
model_interaction1 <- glm(lbw ~ age + race + smk + smk:race, data = lbw_data, family = binomial())
# Get the tidy summary of the model including exponentiated coefficients (ORs) and confidence intervals
tidy_model <- tidy(model_interaction1, exponentiate = TRUE, conf.int = TRUE)
# Display the results
tidy_model
# Load the broom package for tidy summaries
library(broom)
model_interaction1 <- glm(lbw ~ age + race + smk + smk:race, data = lbw_data, family = binomial())
# Get the tidy summary of the model including exponentiated coefficients (ORs) and confidence intervals
tidy_model <- tidy(model_interaction1, exponentiate = TRUE, conf.int = TRUE)
# Display the results
tidy_model
tidy_model %>%
filter(grepl("smk", term))  # Filter to include only terms involving 'smk'
# Load the broom package for tidy summaries
library(broom)
model_interaction1 <- glm(lbw ~ age + race + smk + smk:race, data = lbw_data, family = binomial())
# Extract coefficients, odds ratios, and confidence intervals
tidy_model <- tidy(model_interaction, exponentiate = TRUE, conf.int = TRUE)
# Filter out the odds ratios for smoking status and its interaction with race
ors_smoking <- tidy_model %>%
filter(grepl("smk", term)) %>%
select(term, estimate, conf.low, conf.high)
# Display the odds ratios for smoking and its interactions
print(ors_smoking)
# Load the broom package for tidy summaries
library(broom)
model_interaction1 <- glm(lbw ~ age + race + smk + smk:race, data = lbw_data, family = binomial())
# Extract coefficients, odds ratios, and confidence intervals
tidy_model <- tidy(model_interaction1, exponentiate = TRUE, conf.int = TRUE)
# Filter out the odds ratios for smoking status and its interaction with race
ors_smoking <- tidy_model %>%
filter(grepl("smk", term)) %>%
select(term, estimate, conf.low, conf.high)
# Display the odds ratios for smoking and its interactions
print(ors_smoking)
# Load the broom package for tidy summaries
library(broom)
model <- glm(outcome ~ age + race + smk + smk:race,
data = data,
family = binomial())
model_interaction1 <- glm(lbw ~ age + race + smk + smk:race,
data = lbw_data,
family = binomial())
# Load the broom package for tidy summaries
library(broom)
model_interaction1 <- glm(lbw ~ age + race + smk + smk:race,
data = lbw_data,
family = binomial())
# Extract coefficients, odds ratios, and confidence intervals
tidy_model <- tidy(model_interaction1, exponentiate = TRUE, conf.int = TRUE)
# Filter out the odds ratios for smoking status and its interaction with race
ors_smoking <- tidy_model %>%
filter(grepl("smk", term)) %>%
select(term, estimate, conf.low, conf.high)
# Display the odds ratios for smoking and its interactions
print(ors_smoking)
# Load the broom package for tidy summaries
library(broom)
model_interaction1 <- glm(lbw ~ age + race + smk + smk:race,
data = lbw_data,
family = binomial())
# Extract coefficients, odds ratios, and confidence intervals
tidy_model <- tidy(model_interaction, exponentiate = TRUE, conf.int = TRUE)
# Filter out the odds ratios for smoking status and its interaction with race
ors_smoking <- tidy_model %>%
filter(grepl("smk", term)) %>%
select(term, estimate, conf.low, conf.high)
# Display the odds ratios for smoking and its interactions
print(ors_smoking)
# Load the broom package for tidy summaries
library(broom)
model_interaction1 <- glm(lbw ~ age + race + smk + smk:race,
data = lbw_data,
family = binomial())
# Extract coefficients, odds ratios, and confidence intervals
tidy_model <- tidy(model_interaction1, exponentiate = TRUE, conf.int = TRUE)
# Filter out the odds ratios for smoking status and its interaction with race
ors_smoking <- tidy_model %>%
filter(grepl("smk", term)) %>%
select(term, estimate, conf.low, conf.high)
# Display the odds ratios for smoking and its interactions
print(ors_smoking)
# Load the broom package for tidy summaries
library(broom)
model_interaction1 <- glm(lbw ~ age + race + smk + smk:race,
data = lbw_data,
family = binomial())
# Extract coefficients, odds ratios, and confidence intervals
tidy_model <- tidy(model_interaction1, exponentiate = TRUE, conf.int = TRUE)
# Filter out the odds ratios for smoking status and its interaction with race
ors_smoking <- tidy_model %>%
filter(grepl("smk", term)) %>%
select(term, estimate, conf.low, conf.high)
# Display the odds ratios for smoking and its interactions
summary(ors_smoking)
model_interaction1 <- glm(lbw ~ age + race + smk + smk:race,
data = lbw_data,
family = binomial())
summary(model_interaction1)
# Calculate OR and CIs for smoking status within each race category
library(broom)  # for tidy summaries
# Extract model coefficients
tidy_model <- tidy(model, conf.int = TRUE, exponentiate = TRUE)
# Filter for smoking status and interaction terms
smoking_or <- tidy_model[grep("smoking_status", tidy_model$term), ]
# Calculate OR and CIs for smoking status within each race category
library(broom)
# Extract model coefficients
tidy_model <- tidy(model, conf.int = TRUE, exponentiate = TRUE)
# Filter for smoking status and interaction terms
smoking_or <- tidy_model[grep("smoking_status", tidy_model$term), ]
adjusted_or <- with(smoking_or, {
ref_or <- coef[term == "smoking_statussmoker"]
ref_ci_low <- conf.low[term == "smoking_statussmoker"]
ref_ci_high <- conf.high[term == "smoking_statussmoker"]
or_list <- setNames(data.frame(
OR = ref_or * coef,
CI_low = ref_ci_low * conf.low,
CI_high = ref_ci_high * conf.high
), unique(smoking_or$term))
or_list
})
# Calculate odds ratios
or_smk <- exp(coef(model_interaction1)["smk"])
or_smk_interaction <- exp(coef(model_interaction1)[grepl("smk:race", names(coef(model_interaction1)))])
# Calculate confidence intervals
ci_smk <- exp(confint(model_interaction1, "smk"))
model_interaction1 <- glm(lbw ~ age + race + smk + smk:race,
data = lbw_data,
family = binomial())
summary(model_interaction1)
# Calculate odds ratios
or_smk <- exp(coef(model_interaction1)["smk"])
or_smk_interaction <- exp(coef(model_interaction1)[grepl("smk:race", names(coef(model_interaction1)))])
# Calculate confidence intervals
ci_smk <- exp(confint(model_interaction1, "smk"))
# Extract coefficients and standard errors
coef_est <- coef(summary(model_interaction1))
std_errors <- coef_est[, "Std. Error"]
# Calculate odds ratios
odds_ratios <- exp(coef_est[, "Estimate"])
# Calculate 95% confidence intervals using the normal approximation
ci_lower <- exp(coef_est[, "Estimate"] - 1.96 * std_errors)
ci_upper <- exp(coef_est[, "Estimate"] + 1.96 * std_errors)
# Display results
odds_ratio_smk <- odds_ratios["smk"]
ci_smk_lower <- ci_lower["smk"]
ci_smk_upper <- ci_upper["smk"]
cat("Odds Ratio for Smokers (Reference: White):", odds_ratio_smk, "\n")
cat("95% CI for Smokers (Reference: White): [", ci_smk_lower, ",", ci_smk_upper, "]\n")
model_interaction1 <- glm(lbw ~ age + race + smk + smk:race,
data = lbw_data,
family = binomial())
summary(model_interaction1)
# Extract coefficients and standard errors
coef_est <- coef(summary(model_interaction1))
std_errors <- coef_est[, "Std. Error"]
# Calculate odds ratios
odds_ratios <- exp(coef_est[, "Estimate"])
# Calculate 95% confidence intervals using the normal approximation
ci_lower <- exp(coef_est[, "Estimate"] - 1.96 * std_errors)
ci_upper <- exp(coef_est[, "Estimate"] + 1.96 * std_errors)
# Display results
odds_ratio_smk <- odds_ratios["smk"]
ci_smk_lower <- ci_lower["smk"]
ci_smk_upper <- ci_upper["smk"]
cat("Odds Ratio for Smokers (Reference: White):", odds_ratio_smk, "\n")
cat("95% CI for Smokers (Reference: White): [", ci_smk_lower, ",", ci_smk_upper, "]\n")
# Extract coefficients and standard errors
coef_est <- coef(summary(model_interaction1))
std_errors <- coef_est[, "Std. Error"]
# Recode race and smoking status to set reference categories
lbw_data$race <- factor(lbw_data$race, levels = c(1, 2, 3), labels = c("white", "black", "other"))
lbw_data$smk <- factor(lbw_data$smk, levels = c(0, 1), labels = c("non-smoker", "smoker"))
# Fit logistic regression model
model <- glm(lbw ~ age * race + smk, data = lbw_data, family = binomial())
# Load necessary libraries
library(tidyverse)
library(cowplot)
# Read the data
lbw_data <- read.csv("/Users/bingbing/Desktop/LBW.csv")
# Convert factors where appropriate
lbw_data$race <- as.factor(lbw_data$race)
lbw_data$smk <- as.factor(lbw_data$smk)
lbw_data$lbw <- as.factor(lbw_data$lbw)
# Recode race and smoking status to set reference categories
lbw_data$race <- factor(lbw_data$race, levels = c(1, 2, 3), labels = c("white", "black", "other"))
lbw_data$smk <- factor(lbw_data$smk, levels = c(0, 1), labels = c("non-smoker", "smoker"))
# Fit logistic regression model
model <- glm(lbw ~ age * race + smk, data = lbw_data, family = binomial())
# Calculate Odds Ratios and 95% Confidence Intervals with interaction
or <- exp(coef(model))
ci <- exp(confint(model))
# Display Odds Ratios and 95% CIs with interaction
data.frame(OddsRatio = or, LowerCI = ci[,1], UpperCI = ci[,2])
model <- glm(lbw ~ age + race + smk, data = lbw_data, family = binomial())
# Calculating OR for age increase by 5 years, separately by race
age_effect <- coef(summary(model))[["age", "Estimate"]]
se_age_effect <- coef(summary(model))[["age", "Std. Error"]]
# Adjusting age effect for 5 years
or_age_5years <- exp(age_effect * 5)
lower_ci_age_5years <- exp((age_effect - 1.96 * se_age_effect) * 5)
upper_ci_age_5years <- exp((age_effect + 1.96 * se_age_effect) * 5)
c(OR = or_age_5years, LowerCI = lower_ci_age_5years, UpperCI = upper_ci_age_5years)
model_interaction <- glm(lbw ~ age + race + smk + smk:race,
data = lbw_data,
family = binomial())
summary(model_interaction)
# Extract coefficients and standard errors
coef_est <- coef(summary(model_interaction))
std_errors <- coef_est[, "Std. Error"]
# Calculate odds ratios
odds_ratios <- exp(coef_est[, "Estimate"])
# Calculate 95% confidence intervals using the normal approximation
ci_lower <- exp(coef_est[, "Estimate"] - 1.96 * std_errors)
ci_upper <- exp(coef_est[, "Estimate"] + 1.96 * std_errors)
# Display results
odds_ratio_smk <- odds_ratios["smk"]
ci_smk_lower <- ci_lower["smk"]
ci_smk_upper <- ci_upper["smk"]
cat("Odds Ratio for Smokers (Reference: White):", odds_ratio_smk, "\n")
cat("95% CI for Smokers (Reference: White): [", ci_smk_lower, ",", ci_smk_upper, "]\n")
# Calculate Odds Ratios and 95% Confidence Intervals with interaction
or_interaction <- exp(coef(model_interaction))
ci_interaction <- exp(confint(model_interaction))
# Calculate Odds Ratios and 95% Confidence Intervals with interaction
or_interaction <- exp(coef(model_interaction))
ci_interaction <- exp(confint(model_interaction))
# Display Odds Ratios and 95% CIs with interaction
data.frame(OddsRatio = or_interaction, LowerCI = ci_interaction[,1], UpperCI = ci_interaction[,2])
# Calculating OR for age increase by 5 years, separately by race
age_effect <- coef(summary(model_interaction))[["age", "Estimate"]]
se_age_effect <- coef(summary(model_interaction))[["age", "Std. Error"]]
# Adjusting age effect for 5 years
or_age_5years <- exp(age_effect * 5)
lower_ci_age_5years <- exp((age_effect - 1.96 * se_age_effect) * 5)
upper_ci_age_5years <- exp((age_effect + 1.96 * se_age_effect) * 5)
c(OR = or_age_5years, LowerCI = lower_ci_age_5years, UpperCI = upper_ci_age_5years)
# Installing the package if not already installed
install.packages("ResourceSelection")
# Loading the package
library(ResourceSelection)
# Conducting Hosmer-Lemeshow test
hoslem.test(model_interaction1$y, fitted(model_interaction1))
# Loading the package
library(ResourceSelection)
# Conducting Hosmer-Lemeshow test
hoslem.test(model_interaction1$y, fitted(model_interaction1))
# Creating a contingency table
observed <- table(model_interaction1$y, ifelse(model_interaction1$fitted.values > 0.5, 1, 0))
# Performing Pearson chi-squared test
chisq.test(observed)
# Loading the package
library(ResourceSelection)
# Conducting Hosmer-Lemeshow test
hoslem.test(model$y, fitted(model))
# Conducting Hosmer-Lemeshow test
hoslem.test(model_interaction1$y, fitted(model_interaction1))
# Conducting Hosmer-Lemeshow test for model
hoslem.test(model$y, fitted(model))
# Conducting Hosmer-Lemeshow test for model_interaction
hoslem.test(model_interaction1$y, fitted(model_interaction))
install.packages("pROC")
library(pROC)
# ROC curve for the model with interaction terms
roc_interaction <- roc(model_interaction1$y, fitted(model_interaction1))
# Plot ROC curve
plot(roc_interaction, col = "blue", main = "ROC Curve (Model with Interaction Terms)")
# Add AUC to the plot
auc_value_interaction <- auc(roc_interaction)
legend("bottomright", legend = paste("AUC =", round(auc_value_interaction, 2)), col = "blue", lty = 1)
roc_interaction <- roc(model_interaction1$y, fitted(model_interaction1))
# Plot ROC curve
plot(roc_interaction, col = "blue", main = "ROC Curve (Model with Interaction Terms)")
# Add AUC to the plot
auc_value_interaction <- auc(roc_interaction)
legend("bottomright", legend = paste("AUC =", round(auc_value_interaction, 2)), col = "blue", lty = 1)
# Add AUC to the plot
auc_value_interaction <- auc(roc_interaction)
legend("bottomright", legend = paste("AUC =", round(auc_value_interaction, 2)), col = "blue", lty = 1)
# Plot ROC curve
plot(roc_interaction, col = "blue", main = "ROC Curve (Model with Interaction Terms)")
# Add AUC to the plot
auc_value_interaction <- auc(roc_interaction)
legend("bottomright", legend = paste("AUC =", round(auc_value_interaction, 2)), col = "blue", lty = 1)
roc_interaction <- roc(model_interaction1$y, fitted(model_interaction1))
# Plot ROC curve
plot(roc_interaction, col = "blue", main = "ROC Curve (Model with Interaction Terms)")
# Add AUC to the plot
auc_value_interaction <- auc(roc_interaction)
legend("bottomright", legend = paste("AUC =", round(auc_value_interaction, 2)), col = "blue", lty = 1)
# ROC curve for the model with interaction terms
roc <- roc(model_$y, fitted(model))
# ROC curve for the model with interaction terms
roc <- roc(model$y, fitted(model))
# Plot ROC curve
plot(roc, col = "blue", main = "ROC Curve (Model with Interaction Terms)")
# Add AUC to the plot
auc_value <- auc(roc)
legend("bottomright", legend = paste("AUC =", round(auc_value, 2)), col = "blue", lty = 1)
data <- read.table("/Users/bingbing/Desktop/performance_ability_data.txt", header = FALSE)
data <- read.table("/Users/bingbing/Desktop/performance_ability_data.txt", header = FALSE)
# Rename columns
names(data) <- c("Performance_Ability", "Emotional_Stability")
# Fit logistic regression model
model <- glm(Performance_Ability ~ Emotional_Stability, data = data, family = binomial())
# Summary of the model
summary(model)
# MLEs for coefficients
beta_0 <- coef(model)[1]
beta_1 <- coef(model)[2]
MLEs for coefficients
beta_0 <- coef(model)[1]
beta_1 <- coef(model)[2]
beta_0
beta_1
# Generate a sequence of emotional stability values
emotional_stability_values <- seq(min(data$Emotional_Stability), max(data$Emotional_Stability), length.out = 100)
# Use the fitted logistic regression model to predict probabilities
predicted_probabilities <- predict(model, newdata = data.frame(Emotional_Stability = emotional_stability_values), type = "response")
# Plot the data points
plot(data$Emotional_Stability, data$Performance_Ability, pch = 19, xlab = "Emotional Stability", ylab = "Probability of Ability to Perform", main = "Fitted Response Function")
# Overlay the fitted response function
lines(emotional_stability_values, predicted_probabilities, col = "red", lwd = 2)
# Obtain the estimated coefficient for Emotional_Stability (beta_1)
beta_1 <- coef(model)["Emotional_Stability"]
# Exponentiate the coefficient to obtain e^beta_1
e_beta_1 <- exp(beta_1)
# Print the value of e^beta_1
print(e_beta_1)
# Define the emotional stability test score for prediction
emotional_stability_score <- 550
# Predict the probability using the logistic regression model
predicted_probability <- predict(model, newdata = data.frame(Emotional_Stability = emotional_stability_score), type = "response")
# Print the estimated probability
print(predicted_probability)
# Define the target probability
target_probability <- 0.7
# Function to find the emotional stability test score corresponding to the target probability
find_emotional_stability <- function(target_prob) {
uniroot(function(x) predict(model, newdata = data.frame(Emotional_Stability = x), type = "response") - target_prob, interval = c(min(data$Emotional_Stability), max(data$Emotional_Stability)))$root
}
# Estimate the emotional stability test score
estimated_emotional_stability <- find_emotional_stability(target_probability)
# Print the estimated emotional stability test score
print(estimated_emotional_stability)
here :: i_am ("code/conbine_plot.R")
here :: i_am ("code/conbine_plot.R")
here :: i_am ("code/conbine_plot.R")
setwd("/Users/bingbing/Desktop/FinalProject")
here :: i_am ("code/conbine_plot.R")
# Load necessary libraries
library(png)
library(here)
# Set the working directory
setwd("/Users/bingbing/Desktop/FinalProject/code")
# Verify project directory setup with here
print(here::dr_here())
# Reading PNG images into arrays
ct_data <- readPNG(here::here("output", "ct.png"))
ma_data <- readPNG(here::here("output", "ma.png"))
bn_data <- readPNG(here::here("output", "bn.png"))
nn_data <- readPNG(here::here("output", "nn.png"))
um_data <- readPNG(here::here("output", "um.png"))
bc_data <- readPNG(here::here("output", "bc.png"))
# Arrange images in a grid
Final_graph <- grid.arrange(ct_grob, ma_grob, bn_grob, nn_grob, um_grob, bc_grob, ncol = 2, nrow = 3)
# Load necessary libraries
library(png)
library(grid)
library(gridExtra)
library(here)
# Set the working directory
setwd("/Users/bingbing/Desktop/FinalProject")
# Verify project directory setup with here
print(here::dr_here())
# Importing dataset (if needed for other purposes, not for images)
df <- readRDS(here::here("clean_data", "clean_data.rds"))
# Reading PNG images
ct <- readPNG(here::here("output", "ct.png"))
ma <- readPNG(here::here("output", "ma.png"))
bn <- readPNG(here::here("output", "bn.png"))
nn <- readPNG(here::here("output", "nn.png"))
um <- readPNG(here::here("output", "um.png"))
bc <- readPNG(here::here("output", "bc.png"))
# Convert images to raster objects for plotting
ct_grob <- rasterGrob(ct)
ma_grob <- rasterGrob(ma)
bn_grob <- rasterGrob(bn)
nn_grob <- rasterGrob(nn)
um_grob <- rasterGrob(um)
bc_grob <- rasterGrob(bc)
# Arrange images in a grid
Final_graph <- grid.arrange(ct_grob, ma_grob, bn_grob, nn_grob, um_grob, bc_grob, ncol = 2, nrow = 3)
# Save the final composite image
ggsave(filename = here::here("output", "Final_graph.png"),
plot = Final_graph,
width = 10, height = 6, units = "in")
# Load necessary libraries
library(png)
library(grid)
library(gridExtra)
library(here)
library(ggplot2)
# Set the working directory
setwd("/Users/bingbing/Desktop/FinalProject")
# Verify project directory setup with here
print(here::dr_here())
# Importing dataset (if needed for other purposes, not for images)
df <- readRDS(here::here("clean_data", "clean_data.rds"))
# Reading PNG images
ct <- readPNG(here::here("output", "ct.png"))
ma <- readPNG(here::here("output", "ma.png"))
bn <- readPNG(here::here("output", "bn.png"))
nn <- readPNG(here::here("output", "nn.png"))
um <- readPNG(here::here("output", "um.png"))
bc <- readPNG(here::here("output", "bc.png"))
# Convert images to raster objects for plotting
ct_grob <- rasterGrob(ct)
ma_grob <- rasterGrob(ma)
bn_grob <- rasterGrob(bn)
nn_grob <- rasterGrob(nn)
um_grob <- rasterGrob(um)
bc_grob <- rasterGrob(bc)
# Arrange images in a grid
Final_graph <- grid.arrange(ct_grob, ma_grob, bn_grob, nn_grob, um_grob, bc_grob, ncol = 2, nrow = 3)
# Save the final composite image
ggsave(filename = here::here("output", "Final_graph.png"),
plot = Final_graph,
width = 10, height = 6, units = "in")
# importing libraries
library(gtsummary)
library(ggplot2)
library(dplyr)
library(caret)
library(ggcorrplot)
library(ggpubr)
library(naniar)
library(png)
options(warn = -1)
final_graph <- readPNG(here::here("output", "Final_graph.png"))
grid.raster(final_graph)
install.packages("renv")
library(renv)
renv::init()
exit
install.packages("renv")
install.packages("renv")
install.packages("renv")
library(renv)
if (!require("renv")) install.packages("renv")
install.packages("renv")
setwd("/Users/bingbing/Desktop/Final_project")
renv::init()
install.packages("renv")
setwd("~/Final_project")
setwd("/Users/bingbing/Desktop/Final_project")
install.packages("renv")
# 在 R 中设置库的路径
.libPaths("/Users/bingbing/Desktop/Final_project/renv/library")
# 再次尝试安装 renv 到指定的路径
install.packages("renv", lib = "/Users/bingbing/Desktop/Final_project/renv/library")
# 在 R 中加载 renv
library(renv)
install.packages("renv")
gerwd()
getwd()
setwd("/Users/bingbing/Desktop/Final_project")
getwd()
renv::init()
remove.packages("renv")
.libPaths(new = "/Users/bingbing/Desktop/Final_project/Rlibs")
install.packages("renv", lib = "/Users/bingbing/Desktop/Final_project/Rlibs")
setwd("/Users/bingbing/Desktop/Final_project")
library(renv, lib.loc = "/Users/bingbing/Desktop/Final_project/Rlibs")
renv::init(library = "/Users/bingbing/Desktop/Final_project/renv/library")
renv::init(library = "/Users/bingbing/Desktop/Final_project")
sudo chmod -R u+rwX ~/Library/Caches/org.R-project.R/
setwd("/Users/bingbing/Desktop/Final_project")
library(renv)
install.packages("renv")
options(repos = c(CRAN = "https://cran.rstudio.com"))
install.packages("renv")
sudo chmod -R u+rwX /Users/bingbing/Library/Caches/org.R-project.R/
.libPaths()
install.packages("renv")
